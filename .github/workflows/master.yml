name: Master CI/CD

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *' # Exécution quotidienne à minuit

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install hadolint
        run: |
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.7.0/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint
          # Exécution de Hadolint
          /usr/local/bin/hadolint Dockerfile

      - name: Build Docker image
        run: docker build -t project_ror .
        id: stepBuild

      - name: Run simple test
        id: stepTest
        run: |
          docker run -d --name project_ror_container project_ror
          sleep 5s  # Attendez quelques secondes pour permettre au conteneur de démarrer
      
          # Vérifier l'état du conteneur
          docker ps -a
      
          # Exécutez des commandes pour tester
          docker exec project_ror_container rails db:migrate RAILS_ENV=test
          docker exec project_ror_container rails test
      
          # Arrêtez et supprimez le conteneur
          docker stop project_ror_container
          docker rm project_ror_container

      - name: Log in to Docker registry
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Use Github Slug Action 
        uses: rlespinasse/github-slug-action@v4
      
      - name: Get branch name
        id: branch_name
        run: echo "::set-output name=branch_name::$(basename "${{ github.ref }}")"
      
      - name: Tag Docker image with branch name
      
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}/project_ror:${{ steps.branch_name.outputs.branch_name }}" .
          if: steps.stepBuild.result == 'success' && steps.stepTest.result == 'success'
      
      - name: Push Docker image to registry
        run: docker push "${{ secrets.DOCKER_USERNAME }}/project_ror:${{ steps.branch_name.outputs.branch_name }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && needs.build.result == 'success'

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: Log in to Docker registry
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Fetch Git tags
        run: git fetch --tags
      
      - name: Get latest Git tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "::set-output name=latest_tag::${latest_tag}"
      
      - name: Tag Docker image with Git tag
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}/project_ror:${{ steps.latest_tag.outputs.latest_tag }}" .
      
      - name: Push Docker image to registry
        run: docker push "${{ secrets.DOCKER_USERNAME }}/project_ror:${{ steps.latest_tag.outputs.latest_tag }}"
        
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DOCKER_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.latest_tag.outputs.latest_tag }}
          release_name: Release ${{ steps.latest_tag.outputs.latest_tag }}
          draft: false
          prerelease: false